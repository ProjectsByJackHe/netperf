name: reset-slave-machine

on:
  repository_dispatch:
    types: [reset-slave-machine]

jobs:
  print-params:
    name: Print Parameters
    runs-on: ubuntu-latest
    steps:
      - name: Print input params
        run: |
          echo "master_id: ${{ github.event.client_payload.master_id }}" # slave id is master id - 1.
          echo "os: ${{ github.event.client_payload.os }}"
          echo "unique_env_str: ${{ github.event.client_payload.unique_env_str }}"

  do-reset:
    name: Reset Slave Machine
    runs-on: 
      - self-hosted
      - parent=${{ github.event.client_payload.master_id }}
    steps:
      - name: RESET STATE (SLAVE)
        run: |
          # TODO: Eventually, for WS 2025, we want to instead CRUD the VMs, instead of simply reseting their checkpoints here.
          $vmName = "netperf-${{ github.event.client_payload.os }}-client"
          $checkPointName = "LATEST"
          Restore-VMSnapshot -VMName $vmName -Name $checkPointName -Confirm:$false
      - name: Start VM, wait for online status, alert observer.
        run: |
          $vmName = "netperf-${{ matrix.os }}-server"
          Start-VM -Name $vmName
          while ((Get-VM -Name $vmName).State -ne "Running") {
            Write-Host "Waiting for VM to be online..."
            Start-Sleep -Seconds 10
          }
          $headers = @{
            "secret" = "${{ secrets.NETPERF_SYNCER_SECRET }}"
          }
          $key = "${{ github.event.client_payload.unique_env_str }}_slave_reset_done"
          $value = whoami
          $api = "https://netperfapi.azurewebsites.net/setkeyvalue?key=$key&value=$value"

          try {
            Invoke-WebRequest -Uri $api -Headers $headers -Method Post
          } catch {
            Write-Host "Failed to alert observer slave reset done: $_"
            exit 1
          }
          